<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hwara's Playground</title>
    <description>Development and daily</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 10 Dec 2022 20:16:07 +0900</pubDate>
    <lastBuildDate>Sat, 10 Dec 2022 20:16:07 +0900</lastBuildDate>
    <generator>Jekyll v4.3.1</generator>
    
      <item>
        <title>AS5311를 이용한 Magnet Absolute position 측정 테스트</title>
        <description>&lt;p&gt;분해능 1um의 Linear Encoder를 개발하려면 어떻게 해야하나 머리를 싸매다가 찾게 된 IC인 AS5311을 테스트 해보았다.&lt;/p&gt;

&lt;h2 id=&quot;as5311&quot;&gt;AS5311&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;magnetic linear encoder IC&lt;/li&gt;
  &lt;li&gt;absolute 측정 방식에서 자극 한 쌍에 대해 488nm per step의 resolution을 가지며 직렬 통신과 PWM 출력 지원&lt;/li&gt;
  &lt;li&gt;incremental output에서 1.95um per step의 resolution을 가지며 매 자극 쌍마다 index 펄스 발생, 운송 속도는 최대 650mm/second&lt;/li&gt;
  &lt;li&gt;전원으로 3.3V 또는 5V 인가 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pin-설계&quot;&gt;PIN 설계&lt;/h2&gt;

&lt;h3 id=&quot;전원&quot;&gt;전원&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;5V 사용 시, VDD5V(19)핀에 5V 인가 및 VDD3V3(18)핀에 2uF~10uF의 buffer capacitor 추가&lt;/li&gt;
  &lt;li&gt;3.3V 사용 시, VDD5V(19)핀과 VDD3V3(18)핀에 3.3V 인가&lt;/li&gt;
  &lt;li&gt;VSS(8)핀 및 Prog(9)핀 GND와 연결&lt;/li&gt;
  &lt;li&gt;NC(1, 6, 10, 11, 16, 17, 20)핀은 IC 내부적으로 사용하므로 외부에서 사용하지 말 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;출력&quot;&gt;출력&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;PWM(15)핀에서 244Hz의 주파수와 1um의 step을 가지는 pwm 신호 출력&lt;/li&gt;
  &lt;li&gt;CSn(14), CLK(13), DO(12)핀으로 SPI 통신을 이용한 내부 레지스터 데이터 출력&lt;/li&gt;
  &lt;li&gt;A(4), B(5), Index(7)핀으로 incremental output 출력&lt;/li&gt;
  &lt;li&gt;MagINCn(2), MagDECn(3)핀에서 자석과 IC간 간격에 대한 Indicates 신호 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;absolute-position-sensing-테스트&quot;&gt;Absolute Position Sensing 테스트&lt;/h2&gt;

&lt;h3 id=&quot;사용&quot;&gt;사용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Adapter Board for AS5311(with multi-pole magnet strip)&lt;/li&gt;
  &lt;li&gt;NUCLEO-G071RB&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;환경-구성&quot;&gt;환경 구성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;NUCLEO-G071RB 보드의 PA7 핀과 AS5311 어댑터 보드의 PWM 핀 연결&lt;/li&gt;
  &lt;li&gt;타이머 설정
    &lt;ul&gt;
      &lt;li&gt;TIM1
        &lt;ul&gt;
          &lt;li&gt;Presclaer = 63&lt;/li&gt;
          &lt;li&gt;Channel1 = Input Capture direct mode
            &lt;ul&gt;
              &lt;li&gt;Polarity Selection = Rising Edge&lt;/li&gt;
              &lt;li&gt;IC Selection = Direct&lt;/li&gt;
              &lt;li&gt;Prescaler = No division&lt;/li&gt;
              &lt;li&gt;Input filter = 0&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Channel2 = Input Capture indirect mode
            &lt;ul&gt;
              &lt;li&gt;Polarity Selection = Falling Edge&lt;/li&gt;
              &lt;li&gt;IC Selection = Indirect&lt;/li&gt;
              &lt;li&gt;Prescaler = No division&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Counter Period = 65535&lt;/li&gt;
          &lt;li&gt;NVIC → TIM1 capture comapre interrupt enable&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;테스트-펌웨어-코드&quot;&gt;테스트 펌웨어 코드&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Timer Input Capture Callback&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IC1Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IC2Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dutycycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HAL_TIM_IC_CaptureCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TIM_HandleTypeDef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TIM1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HAL_TIM_ACTIVE_CHANNEL_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;IC1Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HAL_TIM_ReadCapturedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIM_CHANNEL_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;TIM1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HAL_TIM_ACTIVE_CHANNEL_2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;IC2Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HAL_TIM_ReadCapturedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIM_CHANNEL_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;dutycycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IC2Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IC1Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IC1Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IC2Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;dutycycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Main Function&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE BEGIN 1 */&lt;/span&gt;
    
   &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE END 1 */&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* MCU Configuration--------------------------------------------------------*/&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* Reset of all peripherals, Initializes the Flash interface and the Systick. */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HAL_Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE BEGIN Init */&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE END Init */&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* Configure the system clock */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SystemClock_Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE BEGIN SysInit */&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE END SysInit */&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* Initialize all configured peripherals */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MX_GPIO_Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MX_USART2_UART_Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MX_TIM1_Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MX_TIM2_Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE BEGIN 2 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HAL_TIM_IC_Start_IT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htim1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIM_CHANNEL_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HAL_TIM_IC_Start_IT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htim1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIM_CHANNEL_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE END 2 */&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* Infinite loop */&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE BEGIN WHILE */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HIGH_um: %lu, LOW_um: %lu, Duty: %.1f%%, Freq: %.1fHz, pos: %.3fum&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IC1Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IC2Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dutycycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;HAL_GPIO_TogglePin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_GREEN_GPIO_Port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED_GREEN_Pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;HAL_UART_Transmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;huart2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;HAL_Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* USER CODE END WHILE */&lt;/span&gt;
    
      &lt;span class=&quot;cm&quot;&gt;/* USER CODE BEGIN 3 */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* USER CODE END 3 */&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;테스트-출력&quot;&gt;테스트 출력&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HIGH_um: 4104, LOW_um: 4034, Duty: 98.2%, Freq: 243.7Hz, pos: 1968.592um
HIGH_um: 4104, LOW_um: 3993, Duty: 97.2%, Freq: 243.7Hz, pos: 1948.584um
HIGH_um: 4104, LOW_um: 3967, Duty: 96.7%, Freq: 243.7Hz, pos: 1935.896um
HIGH_um: 4104, LOW_um: 109, Duty: 2.7%, Freq: 243.7Hz, pos: 53.192um
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 출력됨을 확인&lt;/p&gt;

&lt;p&gt;정확한 측정을 위해선 자석과 IC의 간격을 0.5mm로 두고 um 단위로 자석을 움직여가며 테스트를 해봐야겠지만..
지그도 없고 케이스 등 기구물도 없는 상태에서 손만으로 자석을 um단위로 정확히 이동시키는건 불가능에 가깝기에 자석을 움직였을 때 값이 변하는걸로 일단 만족,,^^&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ams.com/ko/as5311&quot;&gt;https://ams.com/ko/as5311&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ams.com/documents/20143/36005/AS5311_DS000200_2-00.pdf/575d252f-096b-e5ab-5d8f-d504fd005062&quot;&gt;https://ams.com/documents/20143/36005/AS5311_DS000200_2-00.pdf/575d252f-096b-e5ab-5d8f-d504fd005062&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Dec 2022 12:34:11 +0900</pubDate>
        <link>http://localhost:4000/tech/as5311.html</link>
        <guid isPermaLink="true">http://localhost:4000/tech/as5311.html</guid>
        
        <category>Hardware</category>
        
        <category>AS5311</category>
        
        <category>Sensor</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Ubuntu 환경 기반 Jekyll을 이용한 GitHub Blog 구축 및 theme 적용</title>
        <description>&lt;p&gt;요즈음 배우고 있는 것들은 노션으로 문서화를 열심히 하고 있기에, 이왕 문서화 해둔 거 기술 블로그를 하나 만들어서 공유하면 좋겠다고 생각했다. Jekyll과 GitHub Pages를 이용한 기술 블로그를 많이 쓰는 것 같아 이번에 한 번 만들어 보았다.&lt;/p&gt;

&lt;h2 id=&quot;사전-환경-구성&quot;&gt;사전 환경 구성&lt;/h2&gt;

&lt;p&gt;필자는 기존에 라즈베리파이4 Ubuntu 환경을 구성해놓았기 때문에 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/installation/ubuntu/&quot;&gt;공식사이트&lt;/a&gt;에서 Ubuntu를 위한 메뉴얼을 보고 Ruby를 설치하였다.&lt;/p&gt;

&lt;p&gt;우선 다음 command를 사용해 최신 버전의 Ruby를 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby-full build-essential zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;jekyll에선 ruby gem의 설치 경로를 루트 계정이 아닌 사용자 계정으로 변경하도록 권고하고 있다.
다음 command로 환경 설정 변수에 설정을 추가할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'# Install Ruby Gems to ~/gems'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export GEM_HOME=&quot;$HOME/gems&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;$HOME/gems/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;필자는 echo에 해당하는 부분은 직접 ~/.bashrc 파일을 에디터로 열어 추가하였다.&lt;/p&gt;

&lt;p&gt;위의 기본 환경 설정이 끝났다면 이제 Jekyll을 설치하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-설치-및-구성&quot;&gt;Jekyll 설치 및 구성&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Jekyll 과 Bundler 젬을 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./blog&lt;/code&gt;에 새 Jekyll 사이트를 생성&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;생성된 디렉토리로 이동 후 사이트 빌드 및 로컬 서버에 적용&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blog
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;브라우저에서 &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;에 접속&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;정상적으로 설치가 됐다면 여기서 jekyll 기본 화면이 보일 것이고, 나는 여기서 에러가 발생했다. 끝에 –trace를 붙여 에러 자세히 확인하라길래 붙여서 확인해보니 다음과 같이 에러가 발생했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;`require': cannot load such file -- webrick (LoadError)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;“webrick이 뭔데 씹덕아” 를 외치고 싶었지만 에러를 뿜으며 울고있는 terminal을 달랠 방법을 찾았다.&lt;/p&gt;

&lt;p&gt;다행히도 나같은 사람이 많은지 해결책을 금방 찾을 수 있었다.&lt;/p&gt;

&lt;h3 id=&quot;에러-해결&quot;&gt;에러 해결&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --trace&lt;/code&gt; 입력 시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;`require': cannot load such file -- webrick (LoadError)&lt;/code&gt;에러가 발생했을 때 에러 해결 방법&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle add webrick
bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 다시 로컬 서버에서 접속해보면 사이트가 잘 열린다!&lt;/p&gt;

&lt;h2 id=&quot;github-pages로-호스팅하기&quot;&gt;GitHub Pages로 호스팅하기&lt;/h2&gt;

&lt;p&gt;꽤나 어려울 줄 알았는데 설정할 것도 별로 없고 금방 할 수 있도록 잘 만들어놔서 호스팅 자체는 너무 편안했다.&lt;/p&gt;

&lt;p&gt;GitHub에서 Repo 이름을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;your_want_name.github.io&lt;/code&gt; 와 같은 형식으로 Repo를 만들어준다.
위에 jekyll로 만든 폴더에서 git 설정하고 커밋 후 github과 연결해준다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git init
git remote add origin https://github.com/user-name/repo-name
git add .
git commit -m &quot;commit message&quot;
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main Branch가 main이 아니라 master인 경우도 있으니 잘 확인할 것.&lt;/p&gt;

&lt;p&gt;repo에 사이트 push까지 잘 해주었다면 이제 github 사이트에서 설정만 해주면 된다.&lt;/p&gt;

&lt;p&gt;블로그 Repo에 들어가 탭 끝에 있는 Settings -&amp;gt; 좌측 Code and automation에 있는 Pages로 들어가면 Source와 Branch를 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;Source는 Deploy from a branch로 설정하였고, Branch는 자세한 내용은 후술하겠지만 각자 상황에 따라 알맞게 선택한다. 필자는 처음에 main으로 적용했다가 테마 적용 후 gh-pages로 변경하였다.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-테마-적용하기&quot;&gt;Jekyll 테마 적용하기&lt;/h3&gt;

&lt;p&gt;jekyll 테마는 검색해보면 진짜 셀 수 없이 많다.
유료도 있고 무료도 있고 다양하게 있지만 필자는 무료 테마 중 H20-ac가 가장 깔끔하고 맘에 들어서 이걸로 선택했다.&lt;/p&gt;

&lt;p&gt;테마마다 적용방법이 다른지는 모르겠는데, &lt;strong&gt;필자는 기존 jekyll 만들어 둔 폴더에 그대로 다운로드 받은 테마 압축 파일을 풀어 넣고 _config.yml 및 전반적인 페이지 구성 파일들을 수정해주었다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;테마마다 _config.yml에서 수정하는 내용이 다른거 같은데 보통 블로그의 이름, 닉네임, SNS 링크 등 전반적인 블로그 설정에 관련된 내용들이 많다. 다른글에서 따로 다룰 예정.&lt;/p&gt;

&lt;p&gt;전반적인 사이트에 대한 설정을 마치고 테마 내 css, html 파일을 내 입맛에 맞게 바꾸고 위에서 했듯이 로컬서버를 돌려보니 블로그가 내 취향에 맞게 잘 꾸며졌다!&lt;/p&gt;

&lt;p&gt;와 이제 글만 쓰면 되겠다 나이스~! 라고 생각하고 기대감에 부푼것도 한 순간, 분명히 로컬 서버에서는 POST 목록이 잘 보이는데 Github pages에 배포하면 보이지 않는것이었다.&lt;/p&gt;

&lt;p&gt;이때 로컬 서버에서 성공했다고 Github Pages에 배포했을 때까지 성공한다는 보장은 없다는걸 깨달았다.&lt;/p&gt;

&lt;h3 id=&quot;github-pages는-특정-plugins만-지원한다&quot;&gt;Github pages는 특정 plugins만 지원한다&lt;/h3&gt;

&lt;p&gt;Github pages에서는 모든 plugin을 지원하는것이 아니라 몇몇개의 plugin만 공식적으로 지원하기 때문에 github pages dependency에 들어가 있는 plugin만 지원이 된다. 절망스럽게도 내가 받은 theme는 jekyll-paginate-v2 라는 녀석이 적용되어 있었으며 github pages는 이를 지원하지 않았다. plugins이 적용되지 않으니, 블로그에 들어가보면 내가 쓴 글들의 목록이 보이지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“그럼 이 안에 없는 plugin들은 못쓰는건가요?!”&lt;/strong&gt;
절규하며 해결방법을 모색해보니, github pages 자체 환경에서 build를 할 때 plugin을 적용하지 못할 뿐이지, 내 컴퓨터나 다른 서버 등 &lt;strong&gt;해당 plugin을 지원하는 환경에서 build하고, Github pages에서 나타내도록 해주면 된다&lt;/strong&gt;는 것이다!&lt;/p&gt;

&lt;p&gt;근데 다른 사람들은 Travis 같은 것들로 자동화하는 방법만 소개하기에 일단 따라했는데 Travis 무료로 사용할랬더니 카드가 올바지지 않다고 안된단다.. 지금까지 너무나 잘 써온 마스터카드인데.. 그래서 포기하고 이유는 알았으니 해결을 하기 위해 삽질을 하기 시작했다.&lt;/p&gt;

&lt;p&gt;“그럼 build 결과물인 _site만 넣고 push하면 된다는건가?”
그래서_site를 넣고 push했는데 오.. 안된다.. 지금 생각해보면 _site 넣는다고 서버에서 build를 안하는게 아니니 당연,,^^&lt;/p&gt;

&lt;p&gt;뭐가 문제지 싶어 처음엔 설정을 잘못 건드렸나 싶어_config.yml 설정을 계속 바꿔도 보고 paginate-v2에 관련된 옵션을 모두 지워 보기도 하고 여러가지 건드렸는데 POST 페이지는 내 심정을 아는지 모르는지 계속 내게 목록을 보여주지 않았다..&lt;/p&gt;

&lt;p&gt;로컬 서버에서는 잘 되는걸 보면_config.yml 설정 문제는 아닐거 같아 Github을 좀 둘러보니 action에서 이것저것 하고 있다는걸 주목하게 됐다. 처음엔 그냥 파일에 문법 에러나 깨진게 없는지 테스트 해주는건가? 싶어 안 건드리고 있었으나 내용을 살펴보니 build도 하고 deploy까지 하는것이 이 친구들이라는 것을 알게 됐다. ‘잉..? 근데 얘네는 build에 deploy까지 한다는데 build한 결과물을 도대체 어디에 놔두고 뭘 deploy까지 하고 있는거지?’ 라는 생각에 찾아보니 내부 서버에서 build하고 해당 build의 결과물을 gh-pages라는 branch에 자동으로 deploy까지 해주고 있었던 것이다.&lt;/p&gt;

&lt;p&gt;그래서 좀 더 찾아보니 &lt;strong&gt;github pages에 웹사이트가 배포되는 단계&lt;/strong&gt;는 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;글 작성 후 이를 github에 push&lt;/li&gt;
  &lt;li&gt;Github server 환경에서 내가 push한 파일들을 기반으로 Build&lt;/li&gt;
  &lt;li&gt;해당 생성된 결과물이 gh-pages branch에 배포 및 이 파일을 기반으로 웹 페이지 호스팅&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‘그렇다면 gh-pages에 내가 build한 결과물을 직접 push하면 post 목록이 멀쩡하게 보이지 않을까?’&lt;/p&gt;

&lt;p&gt;두근두근하며 gh-pages에 build해놓은 파일을 push했지만 이마저도 실패.&lt;/p&gt;

&lt;p&gt;web쪽으로 build, deploy부터 github actions 등 CI/CD쪽으로 전혀 지식이 없다고 해도 무방할 정도로 아는게 없었기 때문에 이때쯤 멘붕이 왔다.&lt;/p&gt;

&lt;p&gt;그렇게 github actions을 어떻게 활용하는건지 구조가 어떻게 돌아가는지 이리저리 삽질도 해보며 대충 파악할 때쯤 근데 왜 무슨짓을 해도 gh-pages에 있는 내용이 사이트에 적용이 안되지?&lt;/p&gt;

&lt;p&gt;다시 한 번 절망하고 있는데.. 머리 속에 한 생각이 번뜩 스쳐갔다.&lt;/p&gt;

&lt;p&gt;‘어라.. 그리고보니 Github repo 설정에 pages에 무슨 branch 고르는거 있지 않았나..? 설마 그건가…??’&lt;/p&gt;

&lt;p&gt;여러 블로그를 전전하며 세팅을 배우는게 아니라 그저 따라했을 뿐인 나였기에 Github repo 설정에 문제가 있을 줄은 상상도 못했다.&lt;/p&gt;

&lt;p&gt;그렇게 설정을 확인해보니 아니나 다를까 main branch를 기반으로 github pages가 호스팅되고 있는걸 확인했다.&lt;/p&gt;

&lt;p&gt;이것만 바꾸면 삽질이 드디어 끝나는 걸까..?&lt;/p&gt;

&lt;p&gt;손을 벌벌 떨며 &lt;strong&gt;repo 설정에서 github pages에 호스팅 되는 branch를 gh-pages로 변경&lt;/strong&gt;했고 POST 목록은 너무나도 잘 보여 감격의 눈물 한 방울 또르륵 흘렸다 ㅜㅜ..&lt;/p&gt;

&lt;p&gt;성공한 방법을 간단히 요약하자면,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;repo의 github pages 설정에서 branch를 gh-pages로 설정&lt;/li&gt;
  &lt;li&gt;내 PC에서 글 작성 후 jekyll build&lt;/li&gt;
  &lt;li&gt;_site 폴더에 build된 파일을 github 블로그 repo의 gh-pages에 commit 및 push&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;참고로 설정에 따라 branch의 이름 변경도 가능하다.&lt;/p&gt;

&lt;p&gt;사실 github dependency에 제공하는 plugin만 사용했더라면 이런 귀찮은 일이 없었을터인데..&lt;/p&gt;

&lt;p&gt;그래도 어차피 이후에 다른 plugins 쓸려면 했어야 할 일이니까 매도 먼저 맞는게 낫겠지~&lt;/p&gt;

&lt;p&gt;삽질하다보면 정말 사소한 곳에서 잘못되어 안되는 경우가 참 많은거 같다. 이번에도 그런 경우일 줄은.. 여튼 성공적으로 테마 적용을 마무리 할 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;끝난줄-알았지-개발엔-끝이-없다&quot;&gt;끝난줄 알았지? 개발엔 끝이 없다&lt;/h2&gt;

&lt;p&gt;하지만 개발자에게 끝이란 건 존재하지 않는다!
톱니바퀴가 되어 영원한 굴레에서 벗어날 수 없는것이 역시 개발자 아니겠습니까. 하하.&lt;/p&gt;

&lt;p&gt;일단 post가 보이니 포스팅 자체는 가능해졌지만 글 쓰는건 여전히 불편하기에 여러가지 고쳐야 할 사항이 많다.&lt;/p&gt;

&lt;p&gt;현 시점에서 포스팅은 이렇게 하고 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;main branch에서 _post 폴더에 VSCode로 Markdown 글 작성&lt;/li&gt;
  &lt;li&gt;상단 헤더에 직접 글 제목, 날짜 추가&lt;/li&gt;
  &lt;li&gt;jekyll Build&lt;/li&gt;
  &lt;li&gt;main branch에서 build한 파일을 gh-pages branch에 push&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 과정을 거치면 포스팅이 완성되는데.. 원시인도 아니고 직접 날짜 하나하나 쓰고 직접 build도 하고~ push도 하고 앉아있으니 자동화가 우리 삶에 얼마나 이로운 것인지 다시 한 번 깨닫는 계기가 되었다.&lt;/p&gt;

&lt;p&gt;그래서 Jenkins나 Travis ci를 적용해 자동화 해보고 이를 하는 방법을 다음에 써 볼 생각이다. 언제가 될지는 모르겠지만~&lt;/p&gt;

&lt;p&gt;추가로 지금 구상중인 것은 notion api 사용해서 notion에 글 작성해서 특정 notion database에 올리면 자동으로 깃헙 블로그에 배포되도록 하는걸 생각하고 있다.&lt;/p&gt;

&lt;p&gt;이전에 notion api를 이용해서 데이터베이스에 있는 글을 가져오거나 글을 쓰는 등 테스트는 깔짝거려봤기 때문에 가능은 할 듯!&lt;/p&gt;

&lt;p&gt;갈수록 할 일이 태산이구만~ 좀 더 열심히 해야겠다!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/docs/&quot;&gt;https://jekyllrb-ko.github.io/docs/&lt;/a&gt;
&lt;a href=&quot;https://supermemi.tistory.com/145&quot;&gt;https://supermemi.tistory.com/145&lt;/a&gt;
&lt;a href=&quot;https://shlrur.github.io/develog/2019/01/01/jekyll-template-story-3/&quot;&gt;https://shlrur.github.io/develog/2019/01/01/jekyll-template-story-3/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Nov 2022 22:34:11 +0900</pubDate>
        <link>http://localhost:4000/tech/make_jekyll_blog.html</link>
        <guid isPermaLink="true">http://localhost:4000/tech/make_jekyll_blog.html</guid>
        
        <category>jekyll</category>
        
        <category>github pages</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>와 새 블로그! 첫 글!</title>
        <description>&lt;p&gt;첫 글이라니 너무 설렌다리~&lt;/p&gt;

&lt;p&gt;마크다운 문법은 어느정도 익숙해서 쓸 만한데 역시 환경이 너무 어렵다..&lt;/p&gt;

&lt;p&gt;이렇게 환경구성하고 테마 내 맘대로 적용하는데 하루가 걸렸다.
이제 글 편하게 쓰는 법이라던가 시간 자동으로 넣는 방법이라던가.. 여러가지를 찾고 적용해봐야겠다.&lt;/p&gt;

&lt;p&gt;옛날에 네이버 블로그만 깔짝깔짝하다가 이렇게 글 쓰려니 확실히 재밌다.&lt;/p&gt;

&lt;p&gt;이제 열심히 내 메모장으로 써야겠다 홍홍 조와용~&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Nov 2022 14:04:11 +0900</pubDate>
        <link>http://localhost:4000/daily/first-posting.html</link>
        <guid isPermaLink="true">http://localhost:4000/daily/first-posting.html</guid>
        
        <category>daily</category>
        
        
        <category>daily</category>
        
      </item>
    
  </channel>
</rss>
