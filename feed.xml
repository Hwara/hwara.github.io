<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-10T20:16:07+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hwara’s Playground</title><subtitle>Development and daily</subtitle><author><name>Hwara</name></author><entry><title type="html">AS5311를 이용한 Magnet Absolute position 측정 테스트</title><link href="http://localhost:4000/tech/as5311.html" rel="alternate" type="text/html" title="AS5311를 이용한 Magnet Absolute position 측정 테스트" /><published>2022-12-10T12:34:11+09:00</published><updated>2022-12-10T12:34:11+09:00</updated><id>http://localhost:4000/tech/as5311</id><content type="html" xml:base="http://localhost:4000/tech/as5311.html"><![CDATA[<p>분해능 1um의 Linear Encoder를 개발하려면 어떻게 해야하나 머리를 싸매다가 찾게 된 IC인 AS5311을 테스트 해보았다.</p>

<h2 id="as5311">AS5311</h2>

<ul>
  <li>magnetic linear encoder IC</li>
  <li>absolute 측정 방식에서 자극 한 쌍에 대해 488nm per step의 resolution을 가지며 직렬 통신과 PWM 출력 지원</li>
  <li>incremental output에서 1.95um per step의 resolution을 가지며 매 자극 쌍마다 index 펄스 발생, 운송 속도는 최대 650mm/second</li>
  <li>전원으로 3.3V 또는 5V 인가 가능</li>
</ul>

<h2 id="pin-설계">PIN 설계</h2>

<h3 id="전원">전원</h3>

<ul>
  <li>5V 사용 시, VDD5V(19)핀에 5V 인가 및 VDD3V3(18)핀에 2uF~10uF의 buffer capacitor 추가</li>
  <li>3.3V 사용 시, VDD5V(19)핀과 VDD3V3(18)핀에 3.3V 인가</li>
  <li>VSS(8)핀 및 Prog(9)핀 GND와 연결</li>
  <li>NC(1, 6, 10, 11, 16, 17, 20)핀은 IC 내부적으로 사용하므로 외부에서 사용하지 말 것</li>
</ul>

<h3 id="출력">출력</h3>

<ul>
  <li>PWM(15)핀에서 244Hz의 주파수와 1um의 step을 가지는 pwm 신호 출력</li>
  <li>CSn(14), CLK(13), DO(12)핀으로 SPI 통신을 이용한 내부 레지스터 데이터 출력</li>
  <li>A(4), B(5), Index(7)핀으로 incremental output 출력</li>
  <li>MagINCn(2), MagDECn(3)핀에서 자석과 IC간 간격에 대한 Indicates 신호 출력</li>
</ul>

<h2 id="absolute-position-sensing-테스트">Absolute Position Sensing 테스트</h2>

<h3 id="사용">사용</h3>

<ul>
  <li>Adapter Board for AS5311(with multi-pole magnet strip)</li>
  <li>NUCLEO-G071RB</li>
</ul>

<h3 id="환경-구성">환경 구성</h3>

<ul>
  <li>NUCLEO-G071RB 보드의 PA7 핀과 AS5311 어댑터 보드의 PWM 핀 연결</li>
  <li>타이머 설정
    <ul>
      <li>TIM1
        <ul>
          <li>Presclaer = 63</li>
          <li>Channel1 = Input Capture direct mode
            <ul>
              <li>Polarity Selection = Rising Edge</li>
              <li>IC Selection = Direct</li>
              <li>Prescaler = No division</li>
              <li>Input filter = 0</li>
            </ul>
          </li>
          <li>Channel2 = Input Capture indirect mode
            <ul>
              <li>Polarity Selection = Falling Edge</li>
              <li>IC Selection = Indirect</li>
              <li>Prescaler = No division</li>
            </ul>
          </li>
          <li>Counter Period = 65535</li>
          <li>NVIC → TIM1 capture comapre interrupt enable</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="테스트-펌웨어-코드">테스트 펌웨어 코드</h3>

<ul>
  <li>
    <p>Timer Input Capture Callback</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">volatile</span> <span class="kt">uint32_t</span> <span class="n">IC1Value</span><span class="p">,</span> <span class="n">IC2Value</span><span class="p">;</span>
  <span class="k">volatile</span> <span class="kt">float</span> <span class="n">dutycycle</span><span class="p">,</span> <span class="n">Frequency</span><span class="p">,</span> <span class="n">position</span><span class="p">;</span>
    
  <span class="kt">void</span> <span class="nf">HAL_TIM_IC_CaptureCallback</span><span class="p">(</span><span class="n">TIM_HandleTypeDef</span> <span class="o">*</span><span class="n">htim</span><span class="p">)</span>
  <span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">htim</span><span class="o">-&gt;</span><span class="n">Instance</span><span class="o">==</span><span class="n">TIM1</span><span class="p">)</span>
   <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">htim</span><span class="o">-&gt;</span><span class="n">Channel</span> <span class="o">==</span> <span class="n">HAL_TIM_ACTIVE_CHANNEL_1</span><span class="p">)</span> <span class="p">{</span>
     <span class="n">IC1Value</span> <span class="o">=</span> <span class="n">HAL_TIM_ReadCapturedValue</span><span class="p">(</span><span class="n">htim</span><span class="p">,</span> <span class="n">TIM_CHANNEL_1</span><span class="p">);</span>
     <span class="n">TIM1</span><span class="o">-&gt;</span><span class="n">CNT</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">htim</span><span class="o">-&gt;</span><span class="n">Channel</span> <span class="o">==</span> <span class="n">HAL_TIM_ACTIVE_CHANNEL_2</span> <span class="p">)</span> <span class="p">{</span>
     <span class="n">IC2Value</span> <span class="o">=</span> <span class="n">HAL_TIM_ReadCapturedValue</span><span class="p">(</span><span class="n">htim</span><span class="p">,</span> <span class="n">TIM_CHANNEL_2</span><span class="p">);</span>
     <span class="n">dutycycle</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">IC2Value</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">IC1Value</span><span class="p">;</span>
     <span class="n">Frequency</span> <span class="o">=</span> <span class="mi">1000000</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">IC1Value</span><span class="p">;</span>
     <span class="n">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">488</span><span class="o">*</span><span class="n">IC2Value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
     <span class="n">dutycycle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
     <span class="n">Frequency</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
     <span class="n">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
   <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Main Function</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="cm">/* USER CODE BEGIN 1 */</span>
    
   <span class="kt">uint8_t</span> <span class="n">str</span><span class="p">[</span><span class="mi">256</span><span class="p">]</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
    <span class="cm">/* USER CODE END 1 */</span>
    
    <span class="cm">/* MCU Configuration--------------------------------------------------------*/</span>
    
    <span class="cm">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span>
    <span class="n">HAL_Init</span><span class="p">();</span>
    
    <span class="cm">/* USER CODE BEGIN Init */</span>
    
    <span class="cm">/* USER CODE END Init */</span>
    
    <span class="cm">/* Configure the system clock */</span>
    <span class="n">SystemClock_Config</span><span class="p">();</span>
    
    <span class="cm">/* USER CODE BEGIN SysInit */</span>
    
    <span class="cm">/* USER CODE END SysInit */</span>
    
    <span class="cm">/* Initialize all configured peripherals */</span>
    <span class="n">MX_GPIO_Init</span><span class="p">();</span>
    <span class="n">MX_USART2_UART_Init</span><span class="p">();</span>
    <span class="n">MX_TIM1_Init</span><span class="p">();</span>
    <span class="n">MX_TIM2_Init</span><span class="p">();</span>
    <span class="cm">/* USER CODE BEGIN 2 */</span>
    <span class="n">HAL_TIM_IC_Start_IT</span><span class="p">(</span><span class="o">&amp;</span><span class="n">htim1</span><span class="p">,</span> <span class="n">TIM_CHANNEL_1</span><span class="p">);</span>
    <span class="n">HAL_TIM_IC_Start_IT</span><span class="p">(</span><span class="o">&amp;</span><span class="n">htim1</span><span class="p">,</span> <span class="n">TIM_CHANNEL_2</span><span class="p">);</span>
    <span class="cm">/* USER CODE END 2 */</span>
    
    <span class="cm">/* Infinite loop */</span>
    <span class="cm">/* USER CODE BEGIN WHILE */</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
     <span class="n">sprintf</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">str</span><span class="p">,</span> <span class="s">"HIGH_um: %lu, LOW_um: %lu, Duty: %.1f%%, Freq: %.1fHz, pos: %.3fum</span><span class="se">\r\n</span><span class="s">"</span><span class="p">,</span> <span class="n">IC1Value</span><span class="p">,</span> <span class="n">IC2Value</span><span class="p">,</span> <span class="n">dutycycle</span><span class="p">,</span> <span class="n">Frequency</span><span class="p">,</span> <span class="n">position</span><span class="p">);</span>
     <span class="n">HAL_GPIO_TogglePin</span><span class="p">(</span><span class="n">LED_GREEN_GPIO_Port</span><span class="p">,</span> <span class="n">LED_GREEN_Pin</span><span class="p">);</span>
     <span class="n">HAL_UART_Transmit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">huart2</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">strlen</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">str</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>
     <span class="n">HAL_Delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
      <span class="cm">/* USER CODE END WHILE */</span>
    
      <span class="cm">/* USER CODE BEGIN 3 */</span>
    <span class="p">}</span>
    <span class="cm">/* USER CODE END 3 */</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="테스트-출력">테스트 출력</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HIGH_um: 4104, LOW_um: 4034, Duty: 98.2%, Freq: 243.7Hz, pos: 1968.592um
HIGH_um: 4104, LOW_um: 3993, Duty: 97.2%, Freq: 243.7Hz, pos: 1948.584um
HIGH_um: 4104, LOW_um: 3967, Duty: 96.7%, Freq: 243.7Hz, pos: 1935.896um
HIGH_um: 4104, LOW_um: 109, Duty: 2.7%, Freq: 243.7Hz, pos: 53.192um
</code></pre></div></div>

<p>위와 같이 출력됨을 확인</p>

<p>정확한 측정을 위해선 자석과 IC의 간격을 0.5mm로 두고 um 단위로 자석을 움직여가며 테스트를 해봐야겠지만..
지그도 없고 케이스 등 기구물도 없는 상태에서 손만으로 자석을 um단위로 정확히 이동시키는건 불가능에 가깝기에 자석을 움직였을 때 값이 변하는걸로 일단 만족,,^^</p>

<h2 id="reference">Reference</h2>

<p><a href="https://ams.com/ko/as5311">https://ams.com/ko/as5311</a></p>

<p><a href="https://ams.com/documents/20143/36005/AS5311_DS000200_2-00.pdf/575d252f-096b-e5ab-5d8f-d504fd005062">https://ams.com/documents/20143/36005/AS5311_DS000200_2-00.pdf/575d252f-096b-e5ab-5d8f-d504fd005062</a></p>]]></content><author><name>Hwara</name></author><category term="tech" /><category term="Hardware" /><category term="AS5311" /><category term="Sensor" /><summary type="html"><![CDATA[분해능 1um의 Linear Encoder를 개발하려면 어떻게 해야하나 머리를 싸매다가 찾게 된 IC인 AS5311을 테스트 해보았다.]]></summary></entry><entry><title type="html">Ubuntu 환경 기반 Jekyll을 이용한 GitHub Blog 구축 및 theme 적용</title><link href="http://localhost:4000/tech/make_jekyll_blog.html" rel="alternate" type="text/html" title="Ubuntu 환경 기반 Jekyll을 이용한 GitHub Blog 구축 및 theme 적용" /><published>2022-11-30T22:34:11+09:00</published><updated>2022-11-30T22:34:11+09:00</updated><id>http://localhost:4000/tech/make_jekyll_blog</id><content type="html" xml:base="http://localhost:4000/tech/make_jekyll_blog.html"><![CDATA[<p>요즈음 배우고 있는 것들은 노션으로 문서화를 열심히 하고 있기에, 이왕 문서화 해둔 거 기술 블로그를 하나 만들어서 공유하면 좋겠다고 생각했다. Jekyll과 GitHub Pages를 이용한 기술 블로그를 많이 쓰는 것 같아 이번에 한 번 만들어 보았다.</p>

<h2 id="사전-환경-구성">사전 환경 구성</h2>

<p>필자는 기존에 라즈베리파이4 Ubuntu 환경을 구성해놓았기 때문에 <a href="https://jekyllrb-ko.github.io/docs/installation/ubuntu/">공식사이트</a>에서 Ubuntu를 위한 메뉴얼을 보고 Ruby를 설치하였다.</p>

<p>우선 다음 command를 사용해 최신 버전의 Ruby를 설치한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>ruby-full build-essential zlib1g-dev
</code></pre></div></div>

<p>jekyll에선 ruby gem의 설치 경로를 루트 계정이 아닌 사용자 계정으로 변경하도록 권고하고 있다.
다음 command로 환경 설정 변수에 설정을 추가할 수 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'# Install Ruby Gems to ~/gems'</span> <span class="o">&gt;&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'export GEM_HOME="$HOME/gems"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'export PATH="$HOME/gems/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">source</span> ~/.bashrc
</code></pre></div></div>

<p>필자는 echo에 해당하는 부분은 직접 ~/.bashrc 파일을 에디터로 열어 추가하였다.</p>

<p>위의 기본 환경 설정이 끝났다면 이제 Jekyll을 설치하면 된다.</p>

<h2 id="jekyll-설치-및-구성">Jekyll 설치 및 구성</h2>

<ol>
  <li>Jekyll 과 Bundler 젬을 설치</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">./blog</code>에 새 Jekyll 사이트를 생성</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new blog
</code></pre></div></div>

<ol>
  <li>생성된 디렉토리로 이동 후 사이트 빌드 및 로컬 서버에 적용</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>blog
bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<ol>
  <li>브라우저에서 <a href="http://localhost:4000">http://localhost:4000</a>에 접속</li>
</ol>

<p>정상적으로 설치가 됐다면 여기서 jekyll 기본 화면이 보일 것이고, 나는 여기서 에러가 발생했다. 끝에 –trace를 붙여 에러 자세히 확인하라길래 붙여서 확인해보니 다음과 같이 에러가 발생했다.</p>

<p><code class="language-plaintext highlighter-rouge">`require': cannot load such file -- webrick (LoadError)</code></p>

<p>“webrick이 뭔데 씹덕아” 를 외치고 싶었지만 에러를 뿜으며 울고있는 terminal을 달랠 방법을 찾았다.</p>

<p>다행히도 나같은 사람이 많은지 해결책을 금방 찾을 수 있었다.</p>

<h3 id="에러-해결">에러 해결</h3>

<p><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve --trace</code> 입력 시 <code class="language-plaintext highlighter-rouge">`require': cannot load such file -- webrick (LoadError)</code>에러가 발생했을 때 에러 해결 방법</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle add webrick
bundle <span class="nb">install</span>
</code></pre></div></div>

<p>이후 다시 로컬 서버에서 접속해보면 사이트가 잘 열린다!</p>

<h2 id="github-pages로-호스팅하기">GitHub Pages로 호스팅하기</h2>

<p>꽤나 어려울 줄 알았는데 설정할 것도 별로 없고 금방 할 수 있도록 잘 만들어놔서 호스팅 자체는 너무 편안했다.</p>

<p>GitHub에서 Repo 이름을 <code class="language-plaintext highlighter-rouge">your_want_name.github.io</code> 와 같은 형식으로 Repo를 만들어준다.
위에 jekyll로 만든 폴더에서 git 설정하고 커밋 후 github과 연결해준다.</p>

<pre><code class="language-git">git init
git remote add origin https://github.com/user-name/repo-name
git add .
git commit -m "commit message"
git push -u origin main
</code></pre>

<p>Main Branch가 main이 아니라 master인 경우도 있으니 잘 확인할 것.</p>

<p>repo에 사이트 push까지 잘 해주었다면 이제 github 사이트에서 설정만 해주면 된다.</p>

<p>블로그 Repo에 들어가 탭 끝에 있는 Settings -&gt; 좌측 Code and automation에 있는 Pages로 들어가면 Source와 Branch를 설정할 수 있다.</p>

<p>Source는 Deploy from a branch로 설정하였고, Branch는 자세한 내용은 후술하겠지만 각자 상황에 따라 알맞게 선택한다. 필자는 처음에 main으로 적용했다가 테마 적용 후 gh-pages로 변경하였다.</p>

<h3 id="jekyll-테마-적용하기">Jekyll 테마 적용하기</h3>

<p>jekyll 테마는 검색해보면 진짜 셀 수 없이 많다.
유료도 있고 무료도 있고 다양하게 있지만 필자는 무료 테마 중 H20-ac가 가장 깔끔하고 맘에 들어서 이걸로 선택했다.</p>

<p>테마마다 적용방법이 다른지는 모르겠는데, <strong>필자는 기존 jekyll 만들어 둔 폴더에 그대로 다운로드 받은 테마 압축 파일을 풀어 넣고 _config.yml 및 전반적인 페이지 구성 파일들을 수정해주었다.</strong></p>

<p>테마마다 _config.yml에서 수정하는 내용이 다른거 같은데 보통 블로그의 이름, 닉네임, SNS 링크 등 전반적인 블로그 설정에 관련된 내용들이 많다. 다른글에서 따로 다룰 예정.</p>

<p>전반적인 사이트에 대한 설정을 마치고 테마 내 css, html 파일을 내 입맛에 맞게 바꾸고 위에서 했듯이 로컬서버를 돌려보니 블로그가 내 취향에 맞게 잘 꾸며졌다!</p>

<p>와 이제 글만 쓰면 되겠다 나이스~! 라고 생각하고 기대감에 부푼것도 한 순간, 분명히 로컬 서버에서는 POST 목록이 잘 보이는데 Github pages에 배포하면 보이지 않는것이었다.</p>

<p>이때 로컬 서버에서 성공했다고 Github Pages에 배포했을 때까지 성공한다는 보장은 없다는걸 깨달았다.</p>

<h3 id="github-pages는-특정-plugins만-지원한다">Github pages는 특정 plugins만 지원한다</h3>

<p>Github pages에서는 모든 plugin을 지원하는것이 아니라 몇몇개의 plugin만 공식적으로 지원하기 때문에 github pages dependency에 들어가 있는 plugin만 지원이 된다. 절망스럽게도 내가 받은 theme는 jekyll-paginate-v2 라는 녀석이 적용되어 있었으며 github pages는 이를 지원하지 않았다. plugins이 적용되지 않으니, 블로그에 들어가보면 내가 쓴 글들의 목록이 보이지 않았다.</p>

<p><strong>“그럼 이 안에 없는 plugin들은 못쓰는건가요?!”</strong>
절규하며 해결방법을 모색해보니, github pages 자체 환경에서 build를 할 때 plugin을 적용하지 못할 뿐이지, 내 컴퓨터나 다른 서버 등 <strong>해당 plugin을 지원하는 환경에서 build하고, Github pages에서 나타내도록 해주면 된다</strong>는 것이다!</p>

<p>근데 다른 사람들은 Travis 같은 것들로 자동화하는 방법만 소개하기에 일단 따라했는데 Travis 무료로 사용할랬더니 카드가 올바지지 않다고 안된단다.. 지금까지 너무나 잘 써온 마스터카드인데.. 그래서 포기하고 이유는 알았으니 해결을 하기 위해 삽질을 하기 시작했다.</p>

<p>“그럼 build 결과물인 _site만 넣고 push하면 된다는건가?”
그래서_site를 넣고 push했는데 오.. 안된다.. 지금 생각해보면 _site 넣는다고 서버에서 build를 안하는게 아니니 당연,,^^</p>

<p>뭐가 문제지 싶어 처음엔 설정을 잘못 건드렸나 싶어_config.yml 설정을 계속 바꿔도 보고 paginate-v2에 관련된 옵션을 모두 지워 보기도 하고 여러가지 건드렸는데 POST 페이지는 내 심정을 아는지 모르는지 계속 내게 목록을 보여주지 않았다..</p>

<p>로컬 서버에서는 잘 되는걸 보면_config.yml 설정 문제는 아닐거 같아 Github을 좀 둘러보니 action에서 이것저것 하고 있다는걸 주목하게 됐다. 처음엔 그냥 파일에 문법 에러나 깨진게 없는지 테스트 해주는건가? 싶어 안 건드리고 있었으나 내용을 살펴보니 build도 하고 deploy까지 하는것이 이 친구들이라는 것을 알게 됐다. ‘잉..? 근데 얘네는 build에 deploy까지 한다는데 build한 결과물을 도대체 어디에 놔두고 뭘 deploy까지 하고 있는거지?’ 라는 생각에 찾아보니 내부 서버에서 build하고 해당 build의 결과물을 gh-pages라는 branch에 자동으로 deploy까지 해주고 있었던 것이다.</p>

<p>그래서 좀 더 찾아보니 <strong>github pages에 웹사이트가 배포되는 단계</strong>는 아래와 같다.</p>

<ol>
  <li>글 작성 후 이를 github에 push</li>
  <li>Github server 환경에서 내가 push한 파일들을 기반으로 Build</li>
  <li>해당 생성된 결과물이 gh-pages branch에 배포 및 이 파일을 기반으로 웹 페이지 호스팅</li>
</ol>

<p>‘그렇다면 gh-pages에 내가 build한 결과물을 직접 push하면 post 목록이 멀쩡하게 보이지 않을까?’</p>

<p>두근두근하며 gh-pages에 build해놓은 파일을 push했지만 이마저도 실패.</p>

<p>web쪽으로 build, deploy부터 github actions 등 CI/CD쪽으로 전혀 지식이 없다고 해도 무방할 정도로 아는게 없었기 때문에 이때쯤 멘붕이 왔다.</p>

<p>그렇게 github actions을 어떻게 활용하는건지 구조가 어떻게 돌아가는지 이리저리 삽질도 해보며 대충 파악할 때쯤 근데 왜 무슨짓을 해도 gh-pages에 있는 내용이 사이트에 적용이 안되지?</p>

<p>다시 한 번 절망하고 있는데.. 머리 속에 한 생각이 번뜩 스쳐갔다.</p>

<p>‘어라.. 그리고보니 Github repo 설정에 pages에 무슨 branch 고르는거 있지 않았나..? 설마 그건가…??’</p>

<p>여러 블로그를 전전하며 세팅을 배우는게 아니라 그저 따라했을 뿐인 나였기에 Github repo 설정에 문제가 있을 줄은 상상도 못했다.</p>

<p>그렇게 설정을 확인해보니 아니나 다를까 main branch를 기반으로 github pages가 호스팅되고 있는걸 확인했다.</p>

<p>이것만 바꾸면 삽질이 드디어 끝나는 걸까..?</p>

<p>손을 벌벌 떨며 <strong>repo 설정에서 github pages에 호스팅 되는 branch를 gh-pages로 변경</strong>했고 POST 목록은 너무나도 잘 보여 감격의 눈물 한 방울 또르륵 흘렸다 ㅜㅜ..</p>

<p>성공한 방법을 간단히 요약하자면,</p>

<ol>
  <li>repo의 github pages 설정에서 branch를 gh-pages로 설정</li>
  <li>내 PC에서 글 작성 후 jekyll build</li>
  <li>_site 폴더에 build된 파일을 github 블로그 repo의 gh-pages에 commit 및 push</li>
</ol>

<p>참고로 설정에 따라 branch의 이름 변경도 가능하다.</p>

<p>사실 github dependency에 제공하는 plugin만 사용했더라면 이런 귀찮은 일이 없었을터인데..</p>

<p>그래도 어차피 이후에 다른 plugins 쓸려면 했어야 할 일이니까 매도 먼저 맞는게 낫겠지~</p>

<p>삽질하다보면 정말 사소한 곳에서 잘못되어 안되는 경우가 참 많은거 같다. 이번에도 그런 경우일 줄은.. 여튼 성공적으로 테마 적용을 마무리 할 수 있었다.</p>

<h2 id="끝난줄-알았지-개발엔-끝이-없다">끝난줄 알았지? 개발엔 끝이 없다</h2>

<p>하지만 개발자에게 끝이란 건 존재하지 않는다!
톱니바퀴가 되어 영원한 굴레에서 벗어날 수 없는것이 역시 개발자 아니겠습니까. 하하.</p>

<p>일단 post가 보이니 포스팅 자체는 가능해졌지만 글 쓰는건 여전히 불편하기에 여러가지 고쳐야 할 사항이 많다.</p>

<p>현 시점에서 포스팅은 이렇게 하고 있다.</p>

<ol>
  <li>main branch에서 _post 폴더에 VSCode로 Markdown 글 작성</li>
  <li>상단 헤더에 직접 글 제목, 날짜 추가</li>
  <li>jekyll Build</li>
  <li>main branch에서 build한 파일을 gh-pages branch에 push</li>
</ol>

<p>위 과정을 거치면 포스팅이 완성되는데.. 원시인도 아니고 직접 날짜 하나하나 쓰고 직접 build도 하고~ push도 하고 앉아있으니 자동화가 우리 삶에 얼마나 이로운 것인지 다시 한 번 깨닫는 계기가 되었다.</p>

<p>그래서 Jenkins나 Travis ci를 적용해 자동화 해보고 이를 하는 방법을 다음에 써 볼 생각이다. 언제가 될지는 모르겠지만~</p>

<p>추가로 지금 구상중인 것은 notion api 사용해서 notion에 글 작성해서 특정 notion database에 올리면 자동으로 깃헙 블로그에 배포되도록 하는걸 생각하고 있다.</p>

<p>이전에 notion api를 이용해서 데이터베이스에 있는 글을 가져오거나 글을 쓰는 등 테스트는 깔짝거려봤기 때문에 가능은 할 듯!</p>

<p>갈수록 할 일이 태산이구만~ 좀 더 열심히 해야겠다!</p>

<hr />

<h1 id="reference">Reference</h1>

<p><a href="https://jekyllrb-ko.github.io/docs/">https://jekyllrb-ko.github.io/docs/</a>
<a href="https://supermemi.tistory.com/145">https://supermemi.tistory.com/145</a>
<a href="https://shlrur.github.io/develog/2019/01/01/jekyll-template-story-3/">https://shlrur.github.io/develog/2019/01/01/jekyll-template-story-3/</a></p>]]></content><author><name>Hwara</name></author><category term="tech" /><category term="jekyll" /><category term="github pages" /><summary type="html"><![CDATA[요즈음 배우고 있는 것들은 노션으로 문서화를 열심히 하고 있기에, 이왕 문서화 해둔 거 기술 블로그를 하나 만들어서 공유하면 좋겠다고 생각했다. Jekyll과 GitHub Pages를 이용한 기술 블로그를 많이 쓰는 것 같아 이번에 한 번 만들어 보았다.]]></summary></entry><entry><title type="html">와 새 블로그! 첫 글!</title><link href="http://localhost:4000/daily/first-posting.html" rel="alternate" type="text/html" title="와 새 블로그! 첫 글!" /><published>2022-11-11T14:04:11+09:00</published><updated>2022-11-11T14:04:11+09:00</updated><id>http://localhost:4000/daily/first-posting</id><content type="html" xml:base="http://localhost:4000/daily/first-posting.html"><![CDATA[<p>첫 글이라니 너무 설렌다리~</p>

<p>마크다운 문법은 어느정도 익숙해서 쓸 만한데 역시 환경이 너무 어렵다..</p>

<p>이렇게 환경구성하고 테마 내 맘대로 적용하는데 하루가 걸렸다.
이제 글 편하게 쓰는 법이라던가 시간 자동으로 넣는 방법이라던가.. 여러가지를 찾고 적용해봐야겠다.</p>

<p>옛날에 네이버 블로그만 깔짝깔짝하다가 이렇게 글 쓰려니 확실히 재밌다.</p>

<p>이제 열심히 내 메모장으로 써야겠다 홍홍 조와용~</p>]]></content><author><name>Hwara</name></author><category term="daily" /><category term="daily" /><summary type="html"><![CDATA[첫 글이라니 너무 설렌다리~]]></summary></entry></feed>